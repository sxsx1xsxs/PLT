# Make sure ocamlbuild can find opam-managed packages: first run
#
# eval `opam config env`

# Easiest way to build: using ocamlbuild, which in turn uses ocamlfind

.PHONY : all
all : openFile.native fopen.o fwrite.o

.PHONY : openFile.native
openFile.native :
	rm -f *.o
	ocamlbuild -use-ocamlfind -pkgs llvm,llvm.analysis -cflags -w,+a-4 \
		openFile.native

# "make clean" removes all generated files

.PHONY : clean
clean :
	ocamlbuild -clean
	rm -rf testall.log *.diff microc scanner.ml parser.ml parser.mli
	rm -rf *.ir *.ir.s *.cmx *.cmi *.cmo *.cmx *.o *.s *.ll *.out *.exe
	rm -rf fopen fwrite

# More detailed: build using ocamlc/ocamlopt + ocamlfind to locate LLVM

# OBJS = ast.cmx sast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx microc.cmx
OBJS = ast.cmx codegen.cmx parser.cmx scanner.cmx toplevel.cmx

openFile : $(OBJS)
	ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis $(OBJS) -o openFile

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

%.cmx : %.ml
	ocamlfind ocamlopt -c -package llvm $<

fopen: fopen.c
	cc -o fopen fopen.c

fwrite: fwrite.c
	cc -o fwrite frwite.c

# Testing the "printbig" example

# printbig : printbig.c
# 	cc -o printbig -DBUILD_TEST printbig.c

### Generated by "ocamldep *.ml *.mli" after building scanner.ml and parser.ml
ast.cmo :
ast.cmx :
codegen.cmo : ast.cmo
codegen.cmx : ast.cmx
openFile.cmo : scanner.cmo parser.cmi codegen.cmo ast.cmo
openFile.cmx : scanner.cmx parser.cmx codegen.cmx ast.cmx
parser.cmo : ast.cmo parser.cmi
parser.cmx : ast.cmx parser.cmi
scanner.cmo : parser.cmi
scanner.cmx : parser.cmx
semant.cmo : ast.cmo
semant.cmx : ast.cmx
parser.cmi : ast.cmo
